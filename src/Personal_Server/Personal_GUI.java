/*
Group number: 5 
Member 1 : Areej Suleman , 1916786
Member 2 : Ebtihaj Alnaqeeb , 2011859
Member 3 : Mai Khalil , 2010295
Member 4 : Sarah Abukhammas 2006235
Member 5 : Shahad Bin Kulaib 2005339
Member 6 : Raghad Alghamdi , 2006357
 */
package Personal_Server;
//All needed imports go to here :

import java.awt.Image;
import java.io.*;
import java.net.*;
import java.text.SimpleDateFormat;
import javax.swing.ImageIcon;
//_____________________________________________________________________________________________________

public class Personal_GUI extends javax.swing.JFrame {

    public Personal_GUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")

    static String imageName = null;
    //Create a Temperature image.
    static ImageIcon Temperature = new ImageIcon("Temperature.png");
    //Create a Heart Rate image.
    static ImageIcon HeartRate = new ImageIcon("HeartRate.png");
    //Create an Oxygen stauration image.
    static ImageIcon Oxygen = new ImageIcon("Oxygen.png");
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        tempText = new javax.swing.JTextField();
        heartRText = new javax.swing.JTextField();
        oxgText = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        connection = new javax.swing.JTextField();
        result = new javax.swing.JTextField();
        image = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(204, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tempText.setBackground(new java.awt.Color(255, 204, 204));
        jPanel1.add(tempText, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 270, 530, 28));

        heartRText.setBackground(new java.awt.Color(255, 204, 204));
        heartRText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                heartRTextActionPerformed(evt);
            }
        });
        jPanel1.add(heartRText, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 330, 530, 28));

        oxgText.setBackground(new java.awt.Color(255, 204, 204));
        oxgText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                oxgTextActionPerformed(evt);
            }
        });
        jPanel1.add(oxgText, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 390, 530, 28));

        jLabel4.setFont(new java.awt.Font("Segoe Print", 1, 12)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 0, 0));
        jLabel4.setText("Temprature:");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 270, -1, -1));

        jLabel5.setFont(new java.awt.Font("Segoe Print", 1, 12)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 0, 0));
        jLabel5.setText("Heart Rate:");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 330, -1, -1));

        jLabel6.setFont(new java.awt.Font("Segoe Print", 1, 12)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(0, 0, 0));
        jLabel6.setText("Oxygen:");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 390, -1, -1));

        connection.setBackground(new java.awt.Color(255, 255, 204));
        connection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectionActionPerformed(evt);
            }
        });
        jPanel1.add(connection, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 200, 420, 20));

        result.setBackground(new java.awt.Color(204, 255, 255));
        result.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resultActionPerformed(evt);
            }
        });
        jPanel1.add(result, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 460, 560, 30));

        image.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jPanel1.add(image, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 570, 280, 160));

        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Personal_Server/bg_RHMS.jpg"))); // NOI18N
        jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 800, 800));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 800, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void oxgTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_oxgTextActionPerformed

    }//GEN-LAST:event_oxgTextActionPerformed

    private void heartRTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_heartRTextActionPerformed

    }//GEN-LAST:event_heartRTextActionPerformed

    private void connectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectionActionPerformed

    }//GEN-LAST:event_connectionActionPerformed

    private void resultActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resultActionPerformed

    }//GEN-LAST:event_resultActionPerformed

    public static void main(String args[]) throws IOException, InterruptedException {

        new Personal_GUI().setVisible(true);

        //Initailizing a socket.
        Socket socket = null;

        //Socket to connect to the medical server.
        Socket client_socket = null;

        //Initailizing an input stream reader.
        InputStreamReader inputStreamReader = null;

        //Initailizing an output stream writer.
        OutputStreamWriter outputStreamWriter = null;

        //Initailizing a buffered reader.
        BufferedReader bufferedReader = null;

        //Initailizing a buffered writer.
        BufferedWriter bufferedWriter = null;

        //Initailizing a server socket that waits for requests to come over the network.
        ServerSocket server_socket = null;

        //Creating the server socket to communicate with the client, & the port No. should be the same.
        //Listen on a certain port No. for connections.
        server_socket = new ServerSocket(2014);

        //The setReuseAddress method allows the socket to be bound even though a previous connection is in a timeout state.
        server_socket.setReuseAddress(true);

        //The starting time.
        long startTime = System.currentTimeMillis();

        //Printing a message.
        connection.setText("Server is ON and wait for data...");

        //Declaring variabales to be read by socket.
        int oxygen;
        int temprature;
        int heartRate;

        //Initailizing the timeout variable with 0 to start connection with 1 client.       
        int timeout = 0;

        //While loop to create new socket and accept the connection with the client.
        while (true) {

            //Communication done ,Handshaking.
            socket = server_socket.accept();

            //Printing a message.
            System.out.println("New client with new connection is established.\nwaiting for data...");
            System.out.println();

            //Creating the input stream reader to read the messages.
            inputStreamReader = new InputStreamReader(socket.getInputStream());

            //Creating the output stream writer to write the messages.
            outputStreamWriter = new OutputStreamWriter(socket.getOutputStream());

            //Creatng the buffered reader and associating it with the input stream reader.
            bufferedReader = new BufferedReader(inputStreamReader);

            //Creatng the buffered writer and associating it with the output stream writer.
            bufferedWriter = new BufferedWriter(outputStreamWriter);

            //Reading the duration of the connection set by the client.
            int duration = bufferedReader.read();

            //Creating a date and identifying the format of the date.
            SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd 'time' HH:mm:ss");

            try {

                //While loop to receive and read data sent by the client. It ends when the connection time is out.
                while (timeout == 0) {

                    //Reading the value of the temprature sent by client.
                    temprature = bufferedReader.read();

                    //Checking if the buffer is empty (there is no data to read).
                    if (temprature == -1) {
                        break;
                    }

                    //Case where the Temprature is normal.
                    if (temprature < 38) {
                        tempText.setText("At date: " + formatter.format(System.currentTimeMillis()) + " Temprature is normal");
                    } //Case where the Temprature is above the normal.
                    else {
                        tempText.setText("At date: " + formatter.format(System.currentTimeMillis()) + " Temperature is high " + temprature);
                        imageName = "Temperature";
                        image.setIcon(Temperature);
                        result.setText(" An alert message is sent to the Medical Server.");
                    }

                    //To wait for 1 second before reading the next int, we will use a thread.
                    Thread.sleep(1000);
                    //----------------------------------------------------------------

                    //Reading the value of the heart rate sent by client.
                    heartRate = bufferedReader.read();

                    //Checking if the buffer is empty (there is no data to read).
                    if (heartRate == -1) {
                        break;
                    }
                    //Case where the heartRate is normal.
                    if (heartRate <= 100 && heartRate >= 60) {
                        heartRText.setText("At date: " + formatter.format(System.currentTimeMillis()) + " Heart Rate is normal");
                    } //Case where the heartRate is below the normal.
                    else if (heartRate < 60) {
                        heartRText.setText("At date: " + formatter.format(System.currentTimeMillis()) + " Heart rate is below normal " + heartRate);
                        result.setText(" An alert message is sent to the Medical Server.");
                        imageName = "HeartRate";
                        image.setIcon(HeartRate);
                    } //Case where the heartRate is above the normal.
                    else {
                        heartRText.setText("At date: " + formatter.format(System.currentTimeMillis()) + " Heart rate is above normal " + heartRate);
                        result.setText(" An alert message is sent to the Medical Server.");
                        imageName = "HeartRate";
                        image.setIcon(HeartRate);
                    }

                    //To wait for 1 second before reading the next int, we will use a thread.
                    Thread.sleep(1000);
                    //------------------------------------------------------------------

                    //Reading the value of the oxygen saturation sent by client.
                    oxygen = bufferedReader.read();

                    //Checking if the buffer is empty (there is no data to read).
                    if (oxygen == -1) {
                        break;
                    }
                    //Case where the Oxygen saturation is normal.
                    if (oxygen > 75) {
                        oxgText.setText("At date: " + formatter.format(System.currentTimeMillis()) + " Oxygen saturation is normal");
                        imageName = "Oxygen";
                        image.setIcon(Oxygen);
                    } //Case where the Oxygen saturation is below the normal.
                    else {
                        oxgText.setText("At date: " + formatter.format(System.currentTimeMillis()) + " Oxygen Saturations is low " + oxygen);
                        imageName = "Oxygen";
                        image.setIcon(Oxygen);
                        result.setText(" An alert message is sent to the Medical Server.");
                    }
                    //------------------------------------------------------------------

                    /*
                    When the sensed data needs to be sent to the medical server to take serious action, 
                    we must establish a connection with the medical server by 
                    opening the client side of the personal server.
                     */
                    //The cases were the client side of the personal server is opened : 
                    if (temprature > 38 || heartRate > 100 || heartRate < 60 || oxygen < 75) {

                        //Create the socket with medical server.
                        //these two lines of code will be used when running this program on different machines 
                        
                        /*InetAddress addresses = InetAddress.getByName("192.186.100.10");
                         String hostName = addresses.getHostName();*/
                        client_socket = new Socket("localhost", 6062);
                        OutputStreamWriter outputStreamWriter1 = new OutputStreamWriter(client_socket.getOutputStream());
                        BufferedWriter bufferedWriter1 = new BufferedWriter(outputStreamWriter1);

                        //Send the data to the medical server.
                        bufferedWriter1.write(temprature);
                        bufferedWriter1.flush();

                        bufferedWriter1.write(heartRate);
                        bufferedWriter1.flush();

                        bufferedWriter1.write(oxygen);
                        bufferedWriter1.flush();

                        //Close the client socket after sending the data to the medical server.
                        client_socket.close();
                    }
                    //------------------------------------------------------------------
                    //To wait for 5 seconds before reading the next block of data,we will use a thread.
                    Thread.sleep(5000);
                    //To distinguish between each block of sensed data, print a blank line.
                    System.out.println("");
                    //To reset all the texts in the GUI screen. 
                    tempText.setText(null);
                    heartRText.setText(null);
                    oxgText.setText(null);

                }//The end of inner while loop.
            }//The end of try.
            catch (IOException exp) {
                //Closing the socket and all of the in/output streams and buffers.
                socket.close();
                inputStreamReader.close();
                outputStreamWriter.close();
                bufferedReader.close();
                bufferedWriter.close();

            }//The end of the catch.

            //Printing a message.   
            System.out.println("Waiting for another connection...");
        }//The end of outer while loop.
    }//The end of the main method.
//-------------------------------------------------------------------------------------------------
    // Variables declaration - do not modify//GEN-BEGIN:variables
    static javax.swing.JTextField connection;
    static javax.swing.JTextField heartRText;
    static javax.swing.JLabel image;
    static javax.swing.JLabel jLabel4;
    static javax.swing.JLabel jLabel5;
    static javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    static javax.swing.JTextField oxgText;
    static javax.swing.JTextField result;
    static javax.swing.JTextField tempText;
    // End of variables declaration//GEN-END:variables
}//The end of the class. 
